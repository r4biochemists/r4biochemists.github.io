---
title: "R9: R for Molecular Biology"
author: "Modesto"
date: "August 17, 2023"
date-modified: "`r format(Sys.time(), '%Y-%m-%d (%H:%M h)')`"
categories: 
  - Advanced plots
  - GGplot
  - Plot layout
  - Color palettes
  - Interactive plots
  - GGplot addons
format: 
  html:
    page-layout: full

toc: true
toc-location: left
toc-depth: 3
number-sections: true
number-depth: 2
code-overflow: wrap
link-external-icon: true
link-external-newwindow: true 
---

```{r wrap-hook, echo=FALSE}
library(knitr)
library(formatR)

hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- "--- Cropped output ---"
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
  #  x <- c(more, x[lines], more)
      x <- c(x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})
```

# Working with sequences

## Regular expressions as a shortcut to explore sequence

Biological data, like protein or nucleic acid sequences can be stored and explored in different formats, each following its own structure. As you can imagine, that facilitates the use of *regular expressions* in any programming language to access that data. The use of regular expressions in R is similar to other languages, particularly, to the use you learnt in Python. Anyway, I suggest that you have a look to the [References](#refs) below.

Moreover, for advanced manipulation of string object, I'd advice the package [Strings](https://stringr.tidyverse.org/).

In the code below, we are going to use some simple regular expressions to explore and analyze the data in a multifasta file containing the whole proteome of the bacteria *Bacillus thuringiensis HER1410*, using `grep()`, `substr()`, `sub()`, and `regexpr()`.

```{r}
#read the text file with readLines()
proteome <- readLines("data/HER1410.fasta")
#number of sequences in the multifasta using grep
length(grep(proteome, pattern=">"))
#extract recombinases
grep("recombinase", proteome,value=TRUE)
#enzymes (aka "-ases")
head(grep("ase", proteome,value=TRUE))
head(grep("ase", proteome,value=TRUE,ignore.case=TRUE)) #lower- & uppercase
#extract names
fastanames <- proteome[grep(proteome, pattern=">")] #extract the headers of all the sequences
names_ase <- fastanames[grep(fastanames, pattern="ase")]



```

### [Quick exercise: Using `sub()` and `substr()`.]{style="color:darkseagreen"}

```{r wd, echo = FALSE, results = 'asis'}
opts_p <- c("sub(names_ase, 1,11)", "sub(names_ase, 2,11))",
    "substr(names_ase, 1,11)",
   answer = "substr(names_ase, 2,11)")

cat("**How would you extract the NCBI protein ID of the enzymes?**",longmcq(opts_p))
```

```{r echo=FALSE, eval=TRUE, output.lines=(1:20)}
substr(names_ase, 2,11)
```

```{r wd2, echo = FALSE, results = 'asis'}
opts_p <- c("sub(names_ase, 2,11)", answer = "sub(\">\",\"\",names_ase)",
    "substr(names_ase, 2,150)")

cat("**How would you remove the `>' from the fasta headers?**",longmcq(opts_p))
```

```{r echo=FALSE, eval=TRUE, output.lines=(1:20)}
sub(">","",names_ase)
```

------------------------------------------------------------------------

### What about `regexpr()`?

```{r}
# regexpr returns the indices of the string where the match begins and the length of the match
(r <- regexpr("(.*)DNA(.*)",fastanames[1:200])) #find all the lines with "DNA" (only 200 lines to don't make it too long)
#which ones?
(dna <- which(r > 0, arr.ind = TRUE))
dna.length <- attr(r,"match.length")[dna]
#extract the results with a loop
nombres <- list()
for (i in 1:length(dna)){
  nombres[[i]] <- substr(fastanames[dna[i]], 1, 1 + dna.length[i])
}
head(nombres)
```

## Working with sequences as objects

The use or regular expressions is very convenient for some quick overview of the (multi)fasta files, but not for more specific analyses. Working with sequences can be facilitated with diverse packages, being `seqinr` and `Biostrings` the more widely used in the literature.

In the following example, we are reading the same protein multifasta and we will obtain basic statistics, subset and save fasta sequences using `SeqinR` *(=seqinr)*.

```{r output.lines=(1:25)}
#reading fasta and playing with it
#install.packages("seqinr")
library(seqinr)
prots <- read.fasta("data/HER1410.fasta")
str(prots)
getName(prots)
```

```{r }
prots[[1]]

seq <- getSequence(prots[[1]])
getName(prots[[1]])
paste(seq, collapse= "")
paste(prots[[1]], collapse= "")
aaa(toupper(seq))
aaa(toupper(unlist(seq)))
aaa(toupper(as.vector(seq)))
pmw(toupper(unlist(seq))) 
(stats1 <- AAstat(toupper(seq), plot = T))
barplot(stats1$Compo, bty="7")

#cool color palette
library(RColorBrewer)
coul = colorRampPalette(brewer.pal(9, "Set1"))(20) #palette is expanded from 9 to 20 colors
barplot(stats1$Compo, col=coul, bty="7")

#dotplot
grep("recombinase",getAnnot(prots))
dotPlot(prots[[5]],prots[[2483]], wsize=3, nmatch=2)
dotPlot(prots[[2177]],prots[[2432]], wsize=3, nmatch=2)
dotPlot(prots[[2177]],prots[[2432]], col=c("floralwhite","dodgerblue"), 
        wsize=6, nmatch=3, xlab=getName(prots[[2177]]),ylab=getName(prots[[2432]]))
#extract the recombinases to a new file
recs <- prots[grep("recombinase",getAnnot(prots))]
#save to a file
write.fasta(recs, names=names(recs), file.out="data/recombinases.faa")
```

As you noticed in the code above, the function `read.fasta()` can read any (multi)fasta file containing a protein or nucleic acid sequence and create a list of lists. Thus, if you want to extract a sequence as a single element, you need to extract if from the list with `unlist()` or convert it to a vector with `as.vector()`.

Once you read the fasta, you can extract the headline name with `getName()` or the sequence with `getSequence()`. Additionally, you can obtain and plot basic stats or compare sequences using `dotPlot()`. Moreover, if you extract a subset of sequences, you can use `write.fasta()` to save those sequences in a new fasta file.

Finally, as in the example below, you can also play with a nucleotide sequence and obtain some useful data, like the `GC()` content, the encoded proteins or the reverse complementary sequence with `rev()` and `comp()`, respectively.

```{r }
#now the nt sequence
plasmid_nt <- read.fasta("data/HER1410nt.fasta")

count(unlist(plasmid_nt),3)
count(unlist(plasmid_nt),5)

uco(plasmid_nt[[1]],frame=0)
uco(plasmid_nt[[1]],frame=2)
```

```{r output.lines=(1:25)}
translate(plasmid_nt[[1]])
```

```{r }
GC(plasmid_nt[[1]])
plasmid_nt[[1]][1:100]
comp(plasmid_nt[[1]][1:100])
rev(comp(plasmid_nt[[1]][1:100]))
```

## Connect with sequence databases with *seqinr*

You can query to NCBI, Uniprot and other databases directly using seqinr. The *seqinr* package was written by the group that created the ACNUC database in Lyon, France (<http://pbil.univ-lyon1.fr/databases/acnuc/acnuc.html>). The ACNUC database is a database that contains most of the data from the NCBI Sequence Database, as well as data from other sequence databases such as UniProt and Ensembl. the ACNUC database is organised into various different ACNUC (sub)-databases, which contain different parts of the NCBI database, and when you want to search the NCBI database via R, you will need to specify which ACNUC sub-database the NCBI data that you want to query is stored in.

To obtain a full list of the ACNUC sub-databases that you can access using *seqinr*, you can use the `choosebank()` function from *seqinr*. Then, you just need to select the database and query your sequence. However, as you can see in the example below it does not work currently. I mentioned this here because I used this previously and found it very useful. In case you want to try it again in the future you can check the examples in the [Reference 4](#r4) below.

```{r error=TRUE}
choosebank()
#select genbank
choosebank("swissprot")
query("pol","AC=P0DPS1",verbose=TRUE,invisible=FALSE)
polseq <- getSequence(pol$req[[1]])
closebank()
```

## The package *rentrez*

Like *seqinr*, other R packages allow accessing to NCBI and other databases, including [*APE*](http://ape-package.ird.fr/) or [*genbankr*](https://bioconductor.org/packages/release/bioc/vignettes/genbankr/inst/doc/genbankr.html)*.* The latter takes advantage of the packages [*rentrez*](https://mran.microsoft.com/snapshot/2014-12-12/web/packages/rentrez/vignettes/rentrez_tutorial.html).

`rentrez` is an R package that helps users query the NCBI's databases to download diverse type of data and metadata, including sequences or research papers.

```{r }
if(!require(rentrez)){
   install.packages("rentrez", repos = "https://cran.rstudio.com/")
}

library(rentrez)
(pols <- entrez_search(db = "pubmed", term = "DNA polymerase") )
str(pols)
(Gon <- entrez_search(db = "pubmed", term = "Gonzalez", retmax=100))
Gon$ids #now kept 100

#we can also fetch data
her1410 <- entrez_search(db = "nuccore", term = "HER1410") 
her1410$ids
her1410_1 <- entrez_fetch(db="nuccore", id=her1410$ids[1], rettype="fasta")
head(her1410_1)
class(her1410_1)
dim(her1410_1)
length(her1410_1)
write(her1410_1,file="her1410_1.fasta")
seq1 <- read.fasta("her1410_1.fasta")
```

As you can see, you can very easily download the data from any NCBI database. Regarding sequences, the main drawback of the function `entrez_fecth()` is that the downloaded sequences are character objects and transform it into sequences that you can handle with *seqinr* or other packages is not straightforward and it requires some polishing (see [ref. 7](#r7)). Alternatively, you can save the data as a new fasta file in your computer before importing with *seqinr,* as in the following example.

```{r}
#compare two files
her1410_2 <- entrez_fetch(db="nuccore", id=her1410$ids[2], rettype="fasta")
write(her1410_2,file="her1410_2.fasta")
seq2 <- read.fasta("her1410_2.fasta")

#codon frequencies
freq1 <- count(unlist(seq1),3, freq=TRUE)
freq2 <- count(unlist(seq2),3, freq=TRUE)

stop1 <- freq1[which(names(freq1)=="tga"| names(freq1)== "tag" | names(freq1)== "taa")]
stop2 <- freq2[which(names(freq2)=="tga"| names(freq2)== "tag" | names(freq2)== "taa")]
stops <- rbind(stop1,stop2)
stops <-  as.data.frame(stops)
stops$sequences <- c(her1410$ids[1],her1410$ids[2])
stops <- cbind(stops$sequences,stack(stops[,1:3]))
names(stops) <- c("sequences","freqs","stop_codon")
#plot
library(ggplot2)
p <- ggplot(data=stops) + geom_bar(aes(x=toupper(stop_codon),y=freqs,col=sequences,fill=sequences),stat="identity",position="dodge",alpha=0.8) 
p + scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_linedraw() + ylab("Codon frequency") + xlab("Stop codon") +  guides(color="none", fill=guide_legend(title="HER1410 sequences"))
```

## Plotting sequences

## Example 1: Sequence logos with `ggseqlogo`

R is very useful for many applications in Biochemistry and Molecular Biology, and *ggplot* is a very good example of that.

```{r}
#script by Luis del Peso
Counts<-matrix(c(2,38,0,0,0,0,10,8,4,7,21,9,9,11,9,23,4,15,10,0,46,0,0,0,32,17,
                 10,15,11,18,9,16,23,11,20,8,10,8,0,46,0,46,2,17,21,13,14,15,
                 27,8,13,8,16,22,24,0,0,0,46,0,2,4,11,11,0,4,1,11,1,4,6,1),
               nrow=4,byrow = T,
               dimnames=list(Nucleotide=c("A","C","G","T"),Pos=1:18))
counts <- data.frame(Counts)
names(counts) <- 1:18
counts <- cbind(stack(counts),c("A","C","G","T"))
colnames(counts) <- c("values","pos","nucleotide")
ggplot(counts, aes(x=pos, y=values, fill=nucleotide)) + 
    geom_bar(position="stack", stat="identity")
```

This is not a very interesting plot. Now, in order to plot the PSSM as a sequence logo, we are going to use the package `ggseqlogo`. Also, to arrange plot, we will use the package `gridExtra`, which is very handy and commonly used to generate complex figures.

```{r}
if(!require(ggseqlogo)) install.packages("ggseqlogo", repos = "https://cran.rstudio.com/", dependencies = TRUE)
library(ggseqlogo)

ggseqlogo(Counts) 


#install.packages("gridExtra")
p1 <- ggseqlogo(Counts, method="prob")
p2 <- ggseqlogo(Counts, method="bits")
gridExtra::grid.arrange(p1, p2)
```

Let's plot some protein logo from the example sequences in the package. Remember that we are working with an add-ons to *ggplot*. That means that all `ggplot` elements can be used.

```{r}
data(ggseqlogo_sample)
str(seqs_aa)
```

```{r output.lines=(1:20)}

head(seqs_aa)
ggseqlogo(seqs_aa, ncol=4)
ggseqlogo(seqs_aa, ncol=2) +   theme_light()
```

## More examples

There are two other ggplot-based packages that I find very interesting for sequence-based plots:

### 1. `ggmsa` allows visualization and annotation of multiple sequence alignments.

Check out vignette and examples here: <http://yulab-smu.top/ggmsa/>

### 2. `drawproteins` is very useful to represent and compare protein domains and catalytic residues.

See the [vignette](https://bioconductor.org/packages/devel/bioc/vignettes/drawProteins/inst/doc/drawProteins_BiocStyle.html) and some example here: <https://rforbiochemists.blogspot.com/>

# Bioconductor

Bioconductor is a repository of R packages for "the analysis and comprehension of high-throughput genomic data". It started 2002 as a platform for understanding analysis of microarray data, being the first R version 1996, and the first stable beta in 2000. Currently, it contains 2183 packages (release [3.16](https://bioconductor.org/news/bioc_3_16_release/), November 2, 2022) for diverse bioinformatics tasks. It also contains many learning resources, spanning [vignettes](https://bioconductor.org/help/package-vignettes/), [course materials](https://bioconductor.org/help/course-materials/), and [workflows](https://bioconductor.org/packages/release/BiocViews.html#___AnnotationData).

The diversity of packages in Bioconductor allows working with widely used bioinformatics apps and file formats (fasta, fastq, BAM, SAM, vcf...), for different stages of sequence analysis, quantification, annotation... You can explore [packages by categories](https://bioconductor.org/packages/release/BiocViews.html#___Software) on the Bioconductor site.

![Illustrative description elaborating the different file types at various stages in a typical analysis, with the package names (in pink boxes) that one will use for each stage. From: <https://www.bioconductor.org/packages/release/workflows/vignettes/sequencing/inst/doc/sequencing.html>](images/paste-8062F001.png)

Some of the most common Bioconductor packages and functions are:

-   [**GenomicRanges**](http://bioconductor.org/packages/release/bioc/html/GenomicRanges.html): 'Ranges' to describe data and annotation; `GRanges()`, `GRangesList()`

-   [**Biostrings**](https://bioconductor.org/packages/release/bioc/html/Biostrings.html): DNA and other sequences, `DNAStringSet()`

-   [**GenomicAlignments**](https://bioconductor.org/packages/release/bioc/html/GenomicAlignments.html): Aligned reads; `GAlignemts()` and friends

-   [**GenomicFeatures**](https://bioconductor.org/packages/release/bioc/html/GenomicFeatures.html), [**AnnotationDbi**](https://bioconductor.org/packages/release/bioc/html/AnnotationDbi.html): annotation resources, `TxDb`, and `org` packages.

-   [**SummarizedExperiment**](https://bioconductor.org/packages/release/bioc/html/SummarizedExperiment.html): coordinating experimental data

-   [**rtracklayer**](https://bioconductor.org/packages/release/bioc/html/rtracklayer.html): import Genome annotations e.g BED, WIG, GTF, etc.

-   [**Annotationhub**](https://bioconductor.org/packages/release/bioc/vignettes/AnnotationHub/inst/doc/AnnotationHub.html): access to Ensembl, UCSC, NCBI and other databases.

I recommend you to check the examples in the [reference 9](#ref9) below and other [workflows](https://bioconductor.org/packages/release/BiocViews.html#___AnnotationData) that you can find at Bioconductor.

# References {#refs}

1.  *R in action.* Robert I. Kabacoff. March 2022 ISBN 9781617296055

2.  Regular expressions in R: <https://rstudio-pubs-static.s3.amazonaws.com/74603_76cd14d5983f47408fdf0b323550b846.html>

3.  R Programming for Data Science (Chapter 17): <https://bookdown.org/rdpeng/rprogdatascience/>

4.  ::: {#r4}
    A little book of R for bioinformatics: <https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/index.html>
    :::

5.  *rentrez* vignette: <https://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html>

6.  Biostrings: <https://kasperdanielhansen.github.io/genbioconductor/html/Biostrings.html>

7.  ::: {#r7}
    Example of the generation of multiple sequence alignments and phylogenies with R: <https://rpubs.com/bhuvic/828540>
    :::

8.  Where do I start using Bioconductor: <http://lcolladotor.github.io/2014/10/16/startbioc/#.Y4ZCaOyZP0p>

9.  ::: {#ref9}
    Bioconductor Workflow: Introduction to Bioconductor for Sequence Data: <https://www.bioconductor.org/packages/release/workflows/vignettes/sequencing/inst/doc/sequencing.html>
    :::

# [Exercises]{style="color:green"}

#### Write a function that, given an input name:

#### 1-. It downloads a sequence from the nucleotide database in Genbank. The function needs to check if the different available sequences for that name are identical and rule out duplicates.

#### 2-. It plots the nucleotide composition (% of A, C, G and T) and the amino acids frequencies in the 6 possible frames.

#### 3-. It should also download the protein sequences with that name and count the number of enzymes (you can use *ase* as keyword) and the number orfans (*hypothetical protein*).

#### Test your function with the nucleotide sequences of the plasmids pSE-12228-03 and pCERC7.

# Session Info

```{r}
sessionInfo()
```
