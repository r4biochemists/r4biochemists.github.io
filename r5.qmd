---
title: "R5: Base plots in R"
author: "Modesto"
date: "August 19, 2024"
date-modified: "`r format(Sys.time(), '%Y-%m-%d (%H:%M h)')`"
categories: 
  - Data visualization
  - Plots
  - Correlation
  - Quantitive data
  - Categorical data
  - Boxplot
  - Scatterplot
  - Stripchart
  - Barplot
  - Histogram
format: 
  html:
    page-layout: full
filters:
  - webr
toc: true
toc-location: left
toc-depth: 2
number-sections: true
number-depth: 3
code-overflow: wrap
link-external-icon: true
link-external-newwindow: true 
---

```{r wrap-hook, echo=FALSE}
library(knitr)
library(formatR)
library(webexercises)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#in RMD files, the default wd for R code chunks is the directory that contains the Rmd document. 
#We change it here to share the working directory with all the Rmd files of the course
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/r4biochemists.github.io")

```

# Plot your data in R

## Why do we make plots?

Data visualization is a very important part of a data analysis because they can efficiently summarize large amounts of data in a graphical format and reveal new insights that are difficult to understand from the raw data. From a researcher's or data analyst's perspective, plotting datasets also helps you become familiar with the data and plan next steps in your analysis. It also allows you to identify statistical pitfalls with an initial plot.

::: {#Anscombe}
:::

![**Anscombe's quartet**. Each of the four datasets consists of 11 data points (orange points) and have nearly identical statistical properties, including means, sample variances, Pearson's sample correlation (r), and linear regression line (blue lines). Modified from Anscombe FJ. Graphs in statistical analysis. Am Stat 1973;27:17--21](images/plots.png){width="400"}

The above Figure is a well-known quartet highlights the importance of graphing data prior to analysis, and why statistical reviewers often ask for such graphs to be made available. As you can see the Pearson r^2^ is very similar, but the data are actually very different. Check out also the Dinosaurus example in the [reference 2 below](#refs).

## Which plot should I do with my data?

There are many different types of graphs, each with their own strengths and use cases. One of the trickiest parts of the analysis process is choosing the right way to represent your data with one of these visualizations. The wrong chart can lead to confusion or misinterpretation of the data (see some examples of bad charts [here](https://www.analyticsvidhya.com/blog/2021/02/data-visualization-bad-representation-of-data/)).

From a classical data analysis perspective, the first consideration in choosing the right plot is the nature of your variables. Some charts are recommended for numerical data (quantitative variables) and others for categorical data (qualitative variables). Then you should consider what role you want your data visualization to play, i.e., what question you want to answer or what message you want to convey. This depends on the number of variables as well as their distribution, grouping or correlation. There are some best practice guidelines, but ultimately you need to consider what is best for your data. What do you want to show? What chart best conveys your message? Is it a comparison between groups? Is it a frequency distribution of 1 variable?

![**The *ExtremePresentation* method for choosing a plot or chart.**](images/chart-chart1.jpg){width="1000"}

For a guidance, you can use the *Chartchooser* above, by Andrew Abela, or the interactive website Visual Vocabulary [here](https://ft-interactive.github.io/visual-vocabulary/).

You can see a description of some of the most common plot types, with many examples on books and dedicated R websites. I suggest to take a look to some of the suggested [References](#References) below, or some **quick examples**, like those [here](https://intro2r.com/simple-base-r-plots.html) or [here](https://hbctraining.github.io/Intro-to-R/lessons/basic_plots_in_r.html). Rather than going through a wide list of plots, we are going to use some examples to learn some basic plotting and see the effect of plot selection in order to understand your data and use them to answer questions.

## Quick Plotting in R

R has a number of built-in tools for diverse graph types such as histograms, scatterplots, stripcharts, bar charts, boxplots, and more. Indeed, there are many functions in R to produce plots ranging from the very basic to the highly complex. We will show a few examples and use the plots as an excuse to add some new tricks for data analysis.

In Lesson [R8](r8.html) we will use the `ggplot2` package for efficient and advanced plot generation and customization. However, you will see that it's sometimes useful to use the plotting functions in base R. These are installed by default with R and do not require any additional packages to be installed. They're quick to type, straightforward to use in simple cases, and run very quickly. Then, if you want to do anything beyond very simple plots, though, it's generally better to switch to `ggplot2`. In fact, once you already know how to use R's base graphics, having these examples side by side will help you transition to using `ggplot2` for when you want to make more sophisticated graphics.

::: callout-important
The function **`plot()`** is actually multifunctional and it can be used to generate different types of plots.
:::

In the table and the examples below you can see how to use `plot()` for different plot types.

![Use of `plot()` function. Source: <https://r-coder.com/plot-r/>](images/paste-D2FB731B.png){width="500"}

For the following examples, we are going to review also some R functions to make up (mock or simulated) data restricted to certain distributions. For instance, using functions like `rnorm()` or `dnorm()` for generation of normal data or normal density curves. The same can be obtained for *Poisson* distribution with `dpois()` and `rpois()`.

```{r}
#generate some sample data with normal distribution
x <- rnorm(500)
y <- x + rnorm(500)
plot(x)
hist(x,col="blue")
plot(x, y)
plot(dnorm(0:100,mean=50,sd=5))
```

We can also change some of the plot parameters to change the plot appearance.

```{r}
#customized Example
plot(x, y, pch = 21,
     bg = rgb(1,0,0,0.5),   # Fill color
     col = "red", # Border color
     cex = 3,      # Symbol size
     lwd = 3)      # Border width
```

Note that **colors** can be specified as a name or code (RGB or HEX). In the case of RGB code, we provide the three values in the range \[0,1\] for red, green, and blue. We can also introduce an optional fourth value that correspond to the alpha, also from 0 (transparent) to 1 (opaque). See [below](#plot-customization) for more details about changing points and line shape and colors.

------------------------------------------------------------------------

## [Quick exercise (I)]{style="color:darkseagreen"}

We have a vector in a *RData* file called [primes.RData](%22data/primes.RData%22) that we would like to plot.

::: callout-tip
# Cross-lesson tip

If you have not worked with the R3 lesson yet, you can take a quick look at how we can [save](r3.html#save1) and [load](r3.html#load) objects into a RData file.
:::

```{r wd, echo = FALSE, results = 'asis'}
opts_p <- c(
   "load(data/primes.RData)",
   answer = "load(\"data/primes.RData\")",
   "open(\"data/primes.RData\")")

cat("**How would you load the vector?**",longmcq(opts_p))
```

Now we want to plot the vector. You may try different plots, but think which plot help you to answer the following question

```{r wd2, echo = FALSE, results = 'asis'}
opts_p <- c( "plot(new_vec)",
   "hist(new_vec, breaks=c(0,25,50,75,100))",
   answer = "boxplot(new_vec)",
   "hist(new_vec, breaks=c(0,100,200,300,400))")

cat("**How would you check the distribution of the data? In other words, how would you check if are there many values below or above the median?**",longmcq(opts_p))
```

Yes, a boxplot is the best choice here.

```{r, echo = TRUE, eval = TRUE, webex.hide = "See the right plot"}
load("data/primes.RData")
boxplot(new_vec)
```

Here's how to interpret this boxplot:

-   The bottom whisker displays the minimum value.
-   The bottom line of the box displays the first quartile value.
-   The black bar in the middle of the box displays the second quartile value (also known as the **median**).
-   The top line of the box displays the third quartile value.
-   The top whisker displays the maximum value.

We can also easily calculate the quartiles of a given dataset in R by using the `quantile()` function.

```{r}
load("data/primes.RData")
quantile(new_vec)
```

Compare the output with the boxplot and interpret the numbers.

## Plot your data and save the plot

As an example, we are going to read again the file [*coli_genomes_renamed.csv*](data/coli_genomes_renamed.csv) that we used in the previous lessons.

::: callout-tip
# Cross-lesson tip

If you have not worked with the R3 lesson yet, you can take a quick look at how we can [open](r3.html#open-and-explore-a-dataframe) and [save](r3.html#save) a table in R.
:::

Now let's play with different plots of our data and try to save one.

```{r}
#open the data
coli_genomes <- read.csv(file = 'data/coli_genomes_renamed.csv', strip.white = TRUE, stringsAsFactors = TRUE)
#attach it to save time and code writing (optional!)
attach(coli_genomes)
#one variable
plot(Year)
#histogram
hist(Year)
#a factor
plot(Source)
#two variables
plot(Contigs, kmer)
#factor + numeric variable and saving the plot
png(file="plot1.png")  #give it a file name
plot(Source,Contigs)  #construct the plot
dev.off()  #save
detach(coli_genomes) #detach
```

As shown in the example, in order to save a plot, we must follow three steps:

1.  Open the file indicating the format: `png()`, `jpg()`, `svg()`, `postscript()`, `bmp()`, `win.metafile()`, or `pdf()`.

2.  Plot the data.

3.  Close the file: `dev.off()`.

Alternatively, you can save the plot using the **Plot** menu or the **Plots panel**: *Export* --\> *Save as Image* or *Save as PDF.*

# Create complex plots

## Add more elements

As you may know, the R function `cor()` calculate the correlation coefficient between two or more vectors and `cor.test()` allow us to quickly perform a correlation test between two variables to know if the correlation is statistically significant. However, a quick plot can be also very useful.

In our example dataframe, we have some features of a list of *E. coli* isolates and the basic stats of the genome sequencing. Regarding this data, do you think that the number of contigs \> 1kb in the genome assemblies (*contigs1kb*) correlates with the total number of contigs (*Contigs*), or the average contig length (*average_contig*)? Let's check the data using simple plots with the `plot()` function. Since we are going to make two plots, we will layout them together using a `par` option.

::: callout-tip
## Plot parameters set up with `par`

Note that `par` can be used to set many graphical parameters. These options are stored in a list R object, that you can get using `par()` (with no arguments).
:::

```{r, fig.width=12, fig.height=6}
#first we can save original settings (optional)
oldpar <- par() 
par(mfrow = c(1, 2)) #graph area in two columns

#correlation plots
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, xlab="Contigs", ylab="Contigs > 1kb")

plot(coli_genomes$contigs1kb ~ coli_genomes$average_contig, xlab="Average contig", ylab="Contigs > 1kb")

```

What do you think? Now that we have seen the linear relationship pictorially in the scatter plot, we should plot the linear regression line and analyze the correlation.

::: callout-important
### REMINDER - Linear model and correlation in R

Linear regression analysis is used to predict the value of a variable based on the value of another variable. In R, you can calculate the linear regression equation with the function `lm()`. The `lm()` function takes in two main arguments, *(1) Formula* and *(2) Data*. The data is typically a data.frame and the formula is a object of class formula (with a diacritical mark like that over the Spanish letter ñ, `~`). But the most common convention is to write out the formula directly in place of the argument as written below.

Then, to fully check the correlation (and avoid situations like in the Anscombe's quartet [above](#Anscombe), you must also remember that correlation coefficient can be calculated with the function `cor()`.
:::

Let's obtain and plot the linear model:

```{r, fig.width=12, fig.height=6}
#linear model
modelito <- lm(coli_genomes$contigs1kb ~ coli_genomes$Contigs)
summary(modelito)  #is the linear model significant???
```

::: callout-tip
Remember that the results of `lm()`, `cor.test()`, and all other tests, are R objects (usually lists) than can be used to retrieve the results or plot the values.
:::

```{r, fig.width=12, fig.height=6}
#set par (we need to set up the par in every code chunk)
par(mfrow = c(1, 2))
#correlation plots with line
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, xlab="Contigs", ylab="Contigs > 1kb")
abline(modelito, col="red")
# we can include the lm() in the plot, without calculating it before
plot(coli_genomes$contigs1kb ~ coli_genomes$average_contig, xlab="Average contig", ylab="Contigs > 1kb")
abline(lm(coli_genomes$contigs1kb ~ coli_genomes$average_contig), col="red")

#now we will check with a cor.test and add some text to the plot
(test1 <- cor.test(coli_genomes$contigs1kb, coli_genomes$Contigs))
(test2 <- cor.test(coli_genomes$contigs1kb, coli_genomes$average_contig))
str(test1)
```

```{r, fig.width=6, fig.height=6}
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, xlab="Contigs", ylab="Contigs > 1kb")
abline(lm(coli_genomes$contigs1kb ~ coli_genomes$Contigs), col="red")
#now add the text in a defined position
text(200,200,paste("Pearson r2=",round(test1$estimate,2)))

plot(coli_genomes$contigs1kb ~ coli_genomes$average_contig, xlab="Average contig", ylab="Contigs > 1kb")
abline(lm(coli_genomes$contigs1kb ~ coli_genomes$average_contig), col="red")
text(40000,200,paste("Pearson r2=",round(test2$estimate,2)))

```

In a step further you can check multiple correlations in a single plot.

```{r,fig.width=12, fig.height=12}
#oh wait! why only one-vs-one?
plot(coli_genomes[,c("VF","Plasmids","kmer","Contigs","N50","longest.contig..bp.","Assembly_length","contigs1kb","average_contig")], main = "Multiple Correlation plot")
```

Now, you have a quick info about possible variable correlations.

------------------------------------------------------------------------

## [Quick exercise (II)]{style="color:darkseagreen"}

For this exercise we are going to use a dataset called [*zebrafish_data.csv*](data/Zebrafish_data.csv). This file contains the results of an experiment in which a collaborator scored the number of metastatic cancer cells upon the expression of different transcripts of the EFNA3 gene. Each transcript is cloned into a pLoC plasmid, and we have negative (empty plasmid) and positive controls (wt EFNA3 transcript), as well as four transcript mutants. Let's import and check the data.

```{r, error=TRUE, fig.width=12, fig.height=6}
#read data
ZFdata <- read.csv("data/Zebrafish_data.csv")
str(ZFdata)
```

```{r wd3, echo = FALSE, results = 'asis'}
opts_p <- c("hist(ZFdata)",
  "barplot(ZFdata)",
   answer = "barplot(ZFdata\\$pLoC), and the same for each construct",
   "hist(ZFdata\\$pLoC), and the same for each construct")

cat("**How would you construct barplots of the data from the six experimental conditions?**",longmcq(opts_p))
```

Let's see some examples:

```{r, error=TRUE, fig.width=12, fig.height=6}
#some plots
barplot(ZFdata)
barplot(ZFdata$pLoC)
par(mfrow=c(1,3)) #arrange the three plots in a row 
#we include a plot title with "main"
barplot(ZFdata$pLoC, col="red", main="pLoc")
barplot(ZFdata$EFNA3, col="green", main="EFNA3")
barplot(ZFdata$NC1s, col="blue",main="NC1s")
par(mfrow=c(2,3)) #arrange the six plots in two rows
#note the "method" option
stripchart(ZFdata$pLoC, main="pLoc")
stripchart(ZFdata$pLoC, method="stack", col="red", main="pLoc")
stripchart(ZFdata$pLoC, method="overplot", col="red",  main="pLoc")
stripchart(ZFdata$pLoC, method="jitter", col="red", main="pLoc")
stripchart(ZFdata$EFNA3, method = "stack",col="green", main="EFNA3")
stripchart(ZFdata$NC1s, method = "stack",col="blue", main="N1cs")
#now histograms
par(mfrow=c(1,3)) #arrange the three plots in a row 
hist(ZFdata$pLoC, col="red",  main="pLoc")
hist(ZFdata$EFNA3, col="green", main="EFNA3")
hist(ZFdata$NC1s, col="blue", main="N1cs")

```

Now try to answer some questions about your data and obtained plots:

```{r wd4, echo = FALSE, results = 'asis'}
opts_p <- c("The empty plasmid pLoC",
  "WT EFNA3","NC1","NC1s","NC2","NC2s",
   answer = "I cannot say")

cat("**1. Which construct has the strongest impact on the dissemination of metastatic cells?**",longmcq(opts_p))
```

```{r wd5, echo = FALSE, results = 'asis'}
opts_p <- c("Histogram",
  "Barplot","Boxplot","Stripchart",
   answer = "I am not sure")

cat("**2. Which plot represent best these data?**",longmcq(opts_p))
```

```{r wd6, echo = FALSE, results = 'asis'}
opts_p <- c("No, not at all", "Yes, they are the same",
  "Yes, but a boxplot will show best the differences between my samples",
   answer = "Yes, but a histogram will show best the differences between my samples")

cat("**3. Does a boxplot represent the same *information* than a histogram?**",longmcq(opts_p))
```

```{r wd7, echo = FALSE, results = 'asis'}
opts_p <- c("No, a barplot represents data frequencies/distribution",
  answer= "No, boxplots and histograms represent data frequencies/distribution","Yes, they alike")

cat("**4. Does a barplot represent the same information than a boxplot?**",longmcq(opts_p))
```

Now, we are going to represent the same data again, introducing some more customization

```{r echo=FALSE, eval=TRUE}
#we can save the par anytime, just in case 
oldpar <- par()
#you can recall this settings with par(oldpar)
#new par settings
par(mfrow = c(1, 3), cex.lab = 1, cex = 1, lwd = 2)
#plotting
hist(ZFdata$pLoC, col=rgb(1,0,0,0.5),  main="pLoc", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")
hist(ZFdata$EFNA3, col=rgb(0,1,0,0.5),  main="EFNA3", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")
hist(ZFdata$NC1s, col=rgb(0,0,1,0.5),  main="NC1s", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")

stripchart(ZFdata$pLoC, method="jitter", pch=19, col=rgb(1,0,0,0.5), vertical=TRUE,  main="pLoc", ylim = c(0,120), xlab = "Number of Metastatic cells")
stripchart(ZFdata$EFNA3, method="jitter", pch=19, col=rgb(0,1,0,0.5), vertical=TRUE, main="EFNA3", ylim = c(0,120), xlab = "Number of Metastatic cells")
stripchart(ZFdata$EFNA3, method="jitter", pch=19, col=rgb(0,1,0,0.5), vertical=TRUE, main="EFNA3", ylim = c(0,120), xlab = "Number of Metastatic cells")

boxplot(ZFdata$pLoC, col=rgb(1,0,0,0.5),  ylim = c(0,120), xlab = "Number of Metastatic cells", main="pLoc")
boxplot(ZFdata$EFNA3, col=rgb(0,1,0,0.5), ylim = c(0,120), xlab = "Number of Metastatic cells",  main="EFNA3")
boxplot(ZFdata$NC1s, col=rgb(0,0,1,0.5), ylim = c(0,120), xlab = "Number of Metastatic cells", main="N1cs")

#restore (optional)
#par(oldpar) 
#alternatively you can reset par with: par(no.readonly = TRUE) 
```

Can you reproduce the above plots?

```{r, echo = TRUE, eval = FALSE, webex.hide = "Answer"}
#new par settings
par(mfrow = c(1, 3), cex.lab = 1, cex = 1, lwd = 2)
#plotting
hist(ZFdata$pLoC, col=rgb(1,0,0,0.5),  main="pLoc", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")
hist(ZFdata$EFNA3, col=rgb(0,1,0,0.5),  main="EFNA3", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")
hist(ZFdata$NC1s, col=rgb(0,0,1,0.5),  main="NC1s", ylim = c(0,20), xlim = c(0,120), xlab = "Number of Metastatic cells")

stripchart(ZFdata$pLoC, method="jitter", pch=19, col=rgb(1,0,0,0.5), vertical=TRUE,  main="pLoc", ylim = c(0,120), xlab = "Number of Metastatic cells")
stripchart(ZFdata$EFNA3, method="jitter", pch=19, col=rgb(0,1,0,0.5), vertical=TRUE, main="EFNA3", ylim = c(0,120), xlab = "Number of Metastatic cells")
stripchart(ZFdata$EFNA3, method="jitter", pch=19, col=rgb(0,1,0,0.5), vertical=TRUE, main="EFNA3", ylim = c(0,120), xlab = "Number of Metastatic cells")

boxplot(ZFdata$pLoC, col=rgb(1,0,0,0.5),  ylim = c(0,120), xlab = "Number of Metastatic cells", main="pLoc")
boxplot(ZFdata$EFNA3, col=rgb(0,1,0,0.5), ylim = c(0,120), xlab = "Number of Metastatic cells",  main="EFNA3")
boxplot(ZFdata$NC1s, col=rgb(0,0,1,0.5), ylim = c(0,120), xlab = "Number of Metastatic cells", main="N1cs")
```

*Do you think, you can answer better the questions now?*

Beyond some basic examples of plotting in R, the take-home message of this example is that the type of plot and the plot parameters (in this case the scale) can be essential for correct interpretation of the data and if they are not properly adjusted the plot can be strongly misleading.

The stripchart and the boxplot strongly suggest that NC2s is probably the strongest transcript, but that is not shown in the barplot. These plots clearly show that barplots are intended for single values (categorical data) and can mislead your conclusions.

## Plot grouped data

We will still use the data from the zebrafish experiment here

In the previous plots, in order to compare three conditions, we needed to make three independent plots. However, in the table, there are six conditions, and it is not very difficult to imagine experiments that might result in a table with even more conditions. How could you plot that? The key question is, different conditions means different variables? In other words:

```{r wd8, echo = FALSE, results = 'asis'}
opts_p <- c("3 variables, WT, empty plasmid and 4 mutants",
  "6, one for each expressed transcript",
   answer = "2 variables, the (1) plasmid/expressed transcript and (2) the number of metastatic cells")

cat("**How many variables are there in the Zebrafish dataset?**",longmcq(opts_p))
```

In data analysis (check Lesson [R6](r6.html)), particularly when you want to compare many variables in different groups, it is more handy to create a *stacked* table or *datamatrix*. Stacked table are also often referred to as *narrow* tables. In contrast, the tables with different conditions (of a same variable) in different columns are named *wide* table or *unstacked*. The code below shows how to *stack* and plot your data by groups using the function `stack()`.

```{r}

#Reshape the table for 1 column per variable with `stack()`

ZF_stacked <- stack(ZFdata)
#now check the result of stack
str(ZF_stacked)
head(ZF_stacked)

#you can also define a colors vector that can be reused
colorines=c(rgb(1,0,0,0.5),rgb(0,1,0,0.5),rgb(0,0,1,0.5),rgb(1,0.5,0,0.5),rgb(0.5,0.5,0.5,0.5),rgb(0,1,1,0.5)) 

#and build the plots
boxplot(ZF_stacked$values ~ ZF_stacked$ind,  col=colorines)

stripchart(ZF_stacked$values ~ ZF_stacked$ind, vertical = TRUE, method="jitter", col=colorines, pch=19, cex=1, ylab="Number of cells", xlab="Plasmid")

```

## More plot customization {#plot-customization}

There are many options to customize your plots, including font type and size, point shape, line type... You can see more info on the [References](#refs) section below. Let's see some examples using code I borrow from <https://r-coder.com/plot-r/>

```{r}
#point shape with "pch"
r <- c(sapply(seq(5, 25, 5), function(i) rep(i, 5)))
t <- rep(seq(25, 5, -5), 5)

plot(r, t, pch = 1:25, cex = 3, yaxt = "n", xaxt = "n",
     ann = FALSE, xlim = c(3, 27), lwd = 1:3)
text(r - 1.5, t, 1:25)

#line type with "lty"
M <- matrix(1:36, ncol = 6)
#we use a `matplot` to plot a matrix.
matplot(M, type = c("l"), lty = 1:6, col = "black", lwd = 3)

# Just to indicate the line types in the plot
j <- 0
invisible(sapply(seq(4, 40, by = 6),
                 function(i) {
                   j <<- j + 1
                   text(2, i, paste("lty =", j))}))


#plot box
par(mfrow = c(2, 3))

#plots
plot(x, y, bty = "o", main = "Default")
plot(x, y, bty = "7", main = "bty = '7'")
plot(x, y, bty = "L", main = "bty = 'L'")
plot(x, y, bty = "U", main = "bty = 'U'")
plot(x, y, bty = "C", main = "bty = 'C'")
plot(x, y, bty = "n", main = "bty = 'n'")

par(mfrow = c(1, 1))

```

## [Quick exercise (III)]{style="color:darkseagreen"}

Can you reproduce the plots below?

```{r}
#| echo: false
#| eval: true
#| warning: false

scores <- sample(0:100,45, replace=TRUE)
height <- rnorm(45,70,2)
teams <- as.factor(rep(c(LETTERS[1:3]),times=15))
par(mfrow=c(2,2))

plot(scores, type="line", lwd=2,
     main="Line Plot of Scores (Run Chart)", col="blue",
     xlab="Samples", ylab="Scores")
points(scores, col="red", pch=19)

hist(height, main="Histogram of Heights", col="aquamarine3",
     xlab="Height")

plot(teams,scores, main="Comparative Boxplots | Scores by Teams",
     col="lightskyblue1",
     xlab="Teams", ylab="Scores")

plot(scores~height, main="Scatter Diagram | Scores by Height",
     col="brown3",
     xlab="Height", ylab="Scores", pch=19, cex=1.2)
```

```{webr-r}
#here is the data
scores <- sample(0:100,45, replace=TRUE)
height <- rnorm(45,70,2)
teams <- as.factor(rep(c(LETTERS[1:3]),times=15))
#type your code for the plot below



```

```{r, echo = TRUE, error = TRUE, eval = TRUE, webex.hide = "Answer"}
#create the data
scores <- sample(0:100,45, replace=TRUE)
height <- rnorm(45,70,2)
teams <- as.factor(rep(c(LETTERS[1:3]),times=15))

#set up the par
par(mfrow=c(2,2))
#plots
plot(scores, type="line", lwd=2,
     main="Line Plot of Scores (Run Chart)", col="blue",
     xlab="Samples", ylab="Scores")
points(scores, col="red", pch=19)

hist(height, main="Histogram of Heights", col="aquamarine3",
     xlab="Height")

plot(teams,scores, main="Comparative Boxplots | Scores by Teams",
     col="lightskyblue1",
     xlab="Teams", ylab="Scores")

plot(scores~height, main="Scatter Diagram | Scores by Height",
     col="brown3",
     xlab="Height", ylab="Scores", pch=19, cex=1.2)
```

## [Quick exercise (IV)]{style="color:darkseagreen"}

Now let's think again in our *E. coli* genomes. How would you add more layers of information to the plot, like labels of specific points?

```{r, echo=FALSE, eval=TRUE}
selected <- c(7, 17, 18)
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, pch=19,col=rgb(1,0,0,0.5), xlab="Contigs", ylab="Contigs > 1kb")
text(coli_genomes$contigs1kb[selected] ~ coli_genomes$Contigs[selected],
     labels = coli_genomes$Strain[selected],
     cex = 0.6, pos = 4, col = "red")
```

```{r, echo = TRUE, webex.hide = "Answer"}
#point label, but only some "selected" points

#step1: create a vector with the selection
selected <- c(7, 17, 18)
#step2: make a plot
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, pch=19,col=rgb(1,0,0,0.5), xlab="Contigs", ylab="Contigs > 1kb")

#step 3: add the labels as a text layer
#note that you can use the formula for the text coordinates
text(coli_genomes$contigs1kb[selected] ~ coli_genomes$Contigs[selected],
     labels = coli_genomes$Strain[selected],
     cex = 0.6, pos = 4, col = "red")
```

You can look for more custom options because there are a lot. I also suggest looking at the function `identify()`, which allows the quick interactive identification and labeling of selected points.

Now, we repeat the scatterplot above of *contigs1kb* vs. *Contigs,* but instead of labels, coloring the points by *Source* as in the plot below. Finally, use the function `legend()` to add a legend.

```{r echo=FALSE, warning=FALSE}
#recode the source as color
#step 1: define an empty vector (not required here, but better to do it)
colorines <- c()
#step 2: use a loop to run over all the source vector
for (i in 1:nrow(coli_genomes)){
#step 3: use switch() to recode the sources as colors
#note that Source is a factor but we need to treat it as a character here
  colorines[i] <- switch(as.character(coli_genomes$Source[i]),
      Avian=rgb(1,0,0,0.4),
      Human=rgb(0,1,0,0.4),
      Porcine=rgb(0,0,1,0.4))                   
}
#plot
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, pch=21,bg=colorines, xlab="Contigs", ylab="Contigs > 1kb")

#legend
#the function unique() is important here, can you figure out why?
legend(100,200,legend=unique(coli_genomes$Source),fill=unique(colorines))
```

```{r, echo = TRUE, eval = FALSE, webex.hide = "Hint"}
#Think in a way to use the variable 'Source' and conditionally recode it as colors
#Then, a recursive way will help you to generate a vector to color all the elements in the plot

```

```{r, echo = TRUE,  webex.hide = "Answer"}
#recode the source as color
#step 1: define an empty vector (not required here, but better to do it)
colorines <- c()
#step 2: use a loop to run over all the source vector
for (i in 1:nrow(coli_genomes)){
#step 3: use switch() to recode the sources as colors
#note that Source is a factor but we need to treat it as a character here
  colorines[i] <- switch(as.character(coli_genomes$Source[i]),
      Avian=rgb(1,0,0,0.4),
      Human=rgb(0,1,0,0.4),
      Porcine=rgb(0,0,1,0.4))                   
}
#plot
plot(coli_genomes$contigs1kb ~ coli_genomes$Contigs, pch=21,bg=colorines, xlab="Contigs", ylab="Contigs > 1kb")

#legend
#the function unique() is important here, can you figure out why?
legend(100,200,legend=unique(coli_genomes$Source),fill=unique(colorines))
```

# [Exercises]{style="color:darkgreen"}

#### 1. Let's suppose we have the expression data for two genes (GeneA and GeneB) in 50 patients, 30 with colon cancer and 20 with lung cancer. {#ex1}

**For the exercise, we are using random data, generated as follows:**

```{r eval=FALSE}
(GeneA <- rnorm(50)) 
(GeneB <- c(rep(-1, 30), rep(2, 20)) + rnorm(50))
(tumor <- factor(c(rep("Colon", 30), rep("Lung", 20))))
```

**a. Before plotting the data, how would you test if there is difference in the expression level by the type of tumor?**

**b. Plot boxplots and density curves of the expression of both genes by type of tumor. Do the plots agree with your answer to the question a?**

[**Tips.**]{.underline} **Check out the functions `density()` and `lines()` in order to plot the density curves and `polygon()` if you want to have filled the area below the curves. Also, note that when plotting multiple lines, you must set the axis limits with the `xlim` and `ylim` arguments when plotting the first curve.**

#### 2. Protein amino acids composition.

**The file [*aapc.csv*](data/aapc.csv) is a plain text file that contains information amino acid composition in all the sequences deposited in the UniProtKB/Swiss-Prot protein data base. Use that file to reproduce the following barplot.**

![](images/paste-91E959E7.png){width="499"}

#### 3. A classic in biochemistry lab: Protein quantification (with special thanks to Carmen Mayoral). You have probably done that with Excel or GraphPad, but after this exercise I'm sure you'll consider a definitive upgrade in your protocols.

**In our lab, we often purify recombinant DNA polymerases. We have recently purify a *WT* and *mutant* proteins, and we want to quantify the amount of pure proteins using a SDS-PAGE. To do so, we loaded decreasing volumes of the protein preparation (serial dilutions, but expresed as volume of the original sample in µL) along with known amounts (ng) of bovine seroalbumin (BSA) as a pattern, as in the image below. Bands were densitometer using [ImageJ](https://openwetware.org/wiki/Protein_Quantification_Using_ImageJ) opensource software (arbitrary units). The data are in three tables containing the BSA pattern (triplicates in [bsa_pattern.csv](data/bsa_pattern.csv)), the results for the wt protein ([curve_wt.csv](data/curve_wt.csv)) and for the mutant ([curve_mut.csv](data/curve_mut.csv)).**

![](images/paste-188BFD52.png)

1.  **Plot the correlation between BSA amounts and the bands density. Color the points by the replicate and include the linear model line, as well as the Pearson R^2^.**

2.  **Use the linear model to obtain the concentration (µM) of *wt* and *mutant* protein preparations. You can use the equation or check out the function `approx()` to directly interpolate the values. Consider the same molecular weight of 99 kDa for both proteins.**

# [Extra exercises on R base plots]{style="color:green"}

-   R Bloggers exercises: <https://www.r-bloggers.com/2016/09/advanced-base-graphics-exercises/>

-   More solved exercises (with a Bioinformatics flavor!!):

    -   Text: <https://www.bioinformatics.babraham.ac.uk/training/Core_R_Plotting/Core%20R%20Plotting%20Exercises.pdf>

    -   Data: <https://www.bioinformatics.babraham.ac.uk/training/Core_R_Plotting/Core%20R%20Plotting%20Data.zip>

    -   Answers: <https://www.bioinformatics.babraham.ac.uk/training/Core_R_Plotting/core_r_plotting_exericse_answers.nb.html>

# References {#references}

1.  *R in action.* Robert I. Kabacoff. March 2022 ISBN 9781617296055

2.  Who needs dataviz anyway: [https://rpubs.com/tylerotto/DinosaurusDozen](https://rpubs.com/tylerotto/DinosaurusDozenhttps://rpubs.com/tylerotto/DinosaurusDozen)

3.  R Graphics Cookbook: <https://r-graphics.org/> (Chapter 2).

4.  Graphics with Base R: <https://intro2r.com/graphics_base_r.html>

5.  [Beyond Bar and Line Graphs: Time for a New Data Presentation Paradigm (Weissberger et al. Plos Biology 2015).](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1002128)

6.  I also advise checking articles and posts that you can find with Google, such as:

    -   How to choose the right chart for your data: <https://dexibit.com/how-to-choose-the-right-chart-to-visualize-your-data/>

    -   Friends Don't Let Friends Make Bad Graphs: <https://github.com/cxli233/FriendsDontLetFriends>

    -   How to choose the Right Chart for Data Visualization: <https://www.analyticsvidhya.com/blog/2021/09/how-to-choose-the-right-chart-for-data-visualization/>

    -   Basic plots in R: <https://hbctraining.github.io/Intro-to-R/lessons/basic_plots_in_r.html>

    -   R Base Plotting: <https://rstudio-pubs-static.s3.amazonaws.com/84527_6b8334fd3d9348579681b24d156e7e9d.html>

    -   Base plotting in R: <https://towardsdatascience.com/base-plotting-in-r-eb365da06b22>

# Session Info

```{r}
sessionInfo()
```
