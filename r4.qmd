---
title: "R4: Functions in R"
date: "August 16, 2024"
author: "Modesto"
date-modified: "`r format(Sys.time(), '%Y-%m-%d (%H:%M h)')`"
categories: 
  - Packages
  - CRAN
  - Funtions
  - Arguments
  - Checkpoints
  - Warning
  - Error
engine: knitr
format: html
page-layout: full
filters:
  - webr
toc: true
toc-location: left
toc-depth: 2
number-sections: true
code-overflow: wrap
link-external-icon: true
link-external-newwindow: true 
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

```{r wrap-hook, echo=FALSE}
library(knitr)
library(formatR)
library(webexercises)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#in RMD files, the default wd for R code chunks is the directory that contains the Rmd document. 
#We change it here to share the working directory with all the Rmd files of the course
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/r4biochemists.github.io")

```

# [R packages]{style="color:darkblue"}

As you already know, R is a '[GNU Software](https://en.wikipedia.org/wiki/GNU)' with a [GPL](https://en.wikipedia.org/wiki/GNU_General_Public_License) license. As a a freely available language it has a great community of users from diverse background and interests. This community has developed a myriad of applications for R, called ***R Packages***. The idea behind R packages is that the chances are that someone has already solved a problem that you're working on, and you can benefit from their work by downloading their package.

::: callout-important
Packages are the basic units of reproducible R code. They contain reusable R functions, the documentation that describes how to use them (help), and some sample data to run tests.

With RStudio you can create your own packages to automate very frequent analyses: <https://support.posit.co/hc/en-us/articles/200486488-Developing-Packages-with-the-RStudio-IDE>
:::

Packages can be installed from one of the public R repositories. In this course we will mainly use two R repos, [**CRAN**](https://cran.r-project.org/) and [**Bioconductor**](https://www.bioconductor.org/). CRAN stands for "the Comprehensive R Archive Network", and contains a large selection of packages that can be used free of charge. You can find a complete list of CRAN packages [here](https://cran.r-project.org/web/packages/available_packages_by_name.html) and a list sorted by topic [here](https://cran.r-project.org/web/views/).

As we will see in more detail later in the [Lesson R9](r9.html), Bioconductor is a repository of software for bioinformatics or computational biology applications. As of August 2024, the CRAN package repository contains 21,127 packages, while Bioconductor version 3.19 contains 2,300 packages.

R packages in CRAN and Bioconductor are reviewed, although they may stop working after R updates. Also, you can often find new (unverified) packages on GitHub, GitLab, Bitbucket or in other repositories. You can install these non-guaranteed packages with the [`devtools`](https://devtools.r-lib.org/) package (on your own responsability).

## Installing and use R packages

As an example, we are going to install and use `xlsx`, a handy package to import/export tables in MS Excel format. You may also check related packages, such as `readxl` or `pzfx`.

```{r, echo=TRUE, eval=FALSE}
#install the package

install.packages("xlsx", repos = "https://cran.rstudio.com/")
#CRAN is the repository by default but it can be optionally indicated
```

::: callout-caution
## Package requirements

Some R packages may have additional requirements. This is something that is not very common and is outside of R or RStudio, as it depends on how the package was developed. Therefore, there is no general rule or recommendation here.

After testing with students in class, I realized that the `xlsx` package requires the path of your Java executable. There are a [few](https://www.r-statistics.com/2012/08/how-to-load-the-rjava-package-after-the-error-java_home-cannot-be-determined-from-the-registry/) [ways](https://stackoverflow.com/a/43183004) you could fix it, but my suggestion would be to use a package that does not have depend on Java. Now that you know how to install and load packages, you can also try other packages for reading and writing XLS files, such as [openxlsx](https://cran.r-project.org/web/packages/openxlsx/index.html) or [readxl](https://cran.r-project.org/web/packages/readxl/index.html).
:::

You must load the package before using it.

```{r, error=TRUE}
#two ways of loading the packages:

#1
library(xlsx) 
#2
require(xlsx)

#help
help(xlsx)
#you can also write in the console ??xlsx

#you can use an if statement to install package only if not installed 
if(!require(xlsx)){
    install.packages("xlsx")
    library(xlsx)
}
#unload the package (optionally)
detach("package:xlsx", unload=TRUE) 
```

Optionally, if you want to unload a package from memory, you can use `detach()`. This can be useful for long scripts.

In the above code we have used `require()` and `library()` functions to call for package loading. These are very similar functions that are often interchangeable. The main difference is that when you use `require()` and it cannot be executed, you will get a warning (see below for how to use *warning*), but not an error. Therefore, your code will always continue to execute if possible. In the following example, we tried to load an unknown package called `uam`.

```{r, error=TRUE}
library(uam)
require(uam)
```

In the next example, we are going to read the file [*coli_genomes_renamed.csv*](data/coli_genomes_renamed.csv), that we used in the lesson R3 and export it ready for MS Excel using the package `xlsx`.

::: callout-tip
# Cross-lesson tip

If you have not worked with the R3 lesson yet, you can take a quick look at how we can [open](r3.html#open-and-explore-a-dataframe) and [save](r3.html#save) a table in R.
:::

```{r}
#open it again
coli_genomes <- read.csv(file = 'data/coli_genomes_renamed.csv')
#save
library(xlsx)
write.xlsx(coli_genomes,"data/coli_genomes.xlsx")
```

Many packages in CRAN also contain a reference manual and some of them also a *vignette*. A vignette is practical guide to each package. You can see all the installed vignettes with [`browseVignettes()`](https://rdrr.io/r/utils/browseVignettes.html) or just `vignette()` for the primary vignette. You can find a bunch of tutorials and tricks about how to use popular packages, but the *vignette* is an official and complete reference that is always helpful.

```{r, error=TRUE}
browseVignettes("xlsx") 
browseVignettes("seqinr")
browseVignettes("ggplot2")
```

Note that in some cases, as in the package *seqinr*, there is no official vignette at CRAN. However, as R is an open access language, you will easily find information about any package or function in other websites, such as [rdrr.io](https://rdrr.io/), [rdocumentation.org](https://www.rdocumentation.org/) or [stackoverflow.com](https://stackoverflow.com/), among others.

## Too many packages

As there are a lot of packages sometimes it takes some time to test different packages for the same analysis. Also, some packages become obsolete with a new R or RStudio version. Thus, is also a good habit to uninstall packages, with the function `remove.package()`.

Sometimes, you can come into two different namesake functions from independent packages. Also, to reduce the memory load you may want to use a function without loading the package. In those cases, as in the examples below, there is a trick to call a specific function, the prefix `package::`. However, it should be noted that in some packages the syntax is complex and you need to call more than one function to actually use a major function.

```{r error=TRUE}
#package getwiki
install.packages("getwiki")
vignette("getwiki")
DNA <- getwiki::search_wiki("DNA")
str(DNA)
DNA$titles
```

::: {#ggplot}
:::

In the four examples below, you will see that `ggplot()` function can be used if you call the package with the prefix `ggplot::`. However, to make a plot you need several functions and you need to either explicit the prefix for all the required functions (option #3) or load the package, as in #4. Check the [Lesson R7](r7.html) for more info on *ggplotting*.

```{r error=TRUE}
#package ggplot2
#1: no package load or calling with prefix
ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +
    geom_point()
#2: call the package with the prefix at the begining of the line
ggplot2::ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +
    geom_point()
#3: prefix in all functions
ggplot2::ggplot(iris, ggplot2::aes(Petal.Length, Petal.Width, colour = Species)) +
    ggplot2::geom_point()
#4: load the package
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) +
    geom_point()
```

Note that in the example we have plotted some data from the dataset named iris. Did you load that data? No need. As we mentioned in the [R3 Lesson](r3.html), R has some built-in datasets that can be used as examples for plots or analysis. You can check all of them using the function `data()`.

## [Quick exercise (I)]{style="color:darkseagreen"}

1.  Install the package `report` and check its *vignette* and the info at the package site: <https://easystats.github.io/report/>

```{r, echo = TRUE, error = TRUE, eval = TRUE, webex.hide = "See an answer"}
install.packages("report")
library(report)

#look for the vignette
vignette(report)
#no vignette for report! Check also the CRAN site for further documentation.
```

2.  Another R built-in dataset is called *DNase* and it contains data of several experiments of DNase treatment. Explore data and use the `report` package [(documentation](https://easystats.github.io/report/)) to test correlation between the DNase variables `conc` and `density`.

```{r, echo = TRUE, error = TRUE, eval = TRUE, webex.hide = "See an answer"}
report(DNase)
report(cor.test(DNase$conc, DNase$density))
```

# [Create user-written functions]{style="color:darkblue"}

## Why? How?

We have discussed throughout the previous lessons how R can help you saving time when you need to analyze and plot the data from your experiment. However, many times, particularly in Bioinformatics, you won't have the data from one single experiment but from many of them.

Creating you own function will be very useful for automation of repetitive analyses or to encapsulate a sequence of expressions that need to be executed numerous times, perhaps under slightly different conditions. Functions are used in most programming languages as separated instructions for specific tasks.

Breaking out our code into independent functions has several advantages:

-   When building or maintaining the function, we can focus just on that function: what information it needs, what steps it performs, and what result it provides.

-   We can simplify the main set of instructions, making it easier to read and maintain over time.

-   It helps us separate work for a team, assigning each independent function to a member of the team and then just interconnect the functions later on.

-   And we can more easily reuse the function in multiple places in one script or copy it to reuse in other projects.

**In R, functions are also considered as objects**. That means that (1) they can be nested, so you can define a function inside another function and (2) you can use functions as arguments to other functions. We will see very useful examples of this latter feature in [Lesson R6](r6.html), using custom functions as arguments for `aggregate()`, `xtabs()`, `lapply()` or `sapply()`.

The overall scheme of an R function is the following:

```         
my_function <- function(argument1, argument2,...){
  statements
  return(object)
  }
```

## My first simple functions

We are going to learn with some examples from a good online [tutorial](https://www.geeksforgeeks.org/functions-in-r-programming/). First, a quite simple function can simply help with calculations:

```{r}
# my first function
myFunction <-  function(x){
  f <- x^2*4+x/3
  return(f)
} 
#we try it
myFunction(4)
myFunction(0)
myFunction(22)
myFunction(3)
```

We can include conditions, loops... Another example can be a function to identify even/odd numbers:

```{r}
# A simple R function to check
# whether x is even or odd
evenOdd <-  function(x){
if(x %% 2 == 0){
	return("even")
  } else {
  	return("odd")
  }
}
#test
evenOdd(4)
evenOdd(3)
#  sometimes you can omit curly braces
evenOdd2 <-  function(x){
if(x %% 2 == 0)
	return("even")
else
	return("odd")
}
evenOdd2(4)
evenOdd2(3)
evenOdd2(7)
evenOdd2(8)
```

In the above example, we found out that curly braces can be omitted sometimes in *if* statements or loops (see <https://www.learnbyexample.org/r-for-loop/#for-loop-without-curly-braces>). This modification makes the code handier, but also riskier, use it carefully. Remember, a great power entails a great responsibility. The same applies to functions. Thus, sometimes when creating an R script, you want to create a small function and use it just once. That happens usually when you want to use your own functions to parse data within an `apply` family function (see [Lesson R6](r6.html)). To deal with those situations, you can use the *inline* function. To create an inline function you have to use the function command with the argument x and then the expression of the function.

Example:

```{r}
# inline functions
f <-  function(x) x^2*4+x/3

f(4)
f(0)
f(22)
```

## [Quick exercise (II)]{style="color:darkseagreen"}

We want to write an inline function that transforms concentrations units: molar (M) into micromolar (µM). How would you do it?

```{r wd2, echo = FALSE, results = 'asis'}
opts_p <- c(
   "f <- function(x) 1000",
   answer = "f <- function(x) x * 1000",
   "f <- function(x) x 1000")

cat("**Select the right answer**",longmcq(opts_p))
```

------------------------------------------------------------------------

## Functions with multiple arguments

Now, we will create a function in R Language that will take multiple inputs and gives us one output.

```{r}
# A simple R function to calculate
# area and perimeter of a rectangle

area  <-  function(length, width){
  area = length * width
  #you may format the output
  print(paste("The area of the rectangle is", length, "x", width, "=", area, "cm²"))
}

area(2,3) # call the function
```

Notice that the output also can be a different type of object, like vector or a list:

```{r}
# Now we calculate area and perimeter of a rectangle


Rectangle <-  function(length, width){
  area = length * width
  perimeter = 2 * (length + width)

# create an object called result which is
# a list of area and perimeter
  result = list("Area" = area, "Perimeter" = perimeter)
  return(result)
}

Rectangle(2, 3)
```

Like in any R function, you can call the arguments by position or by name. Thus, if add the names of the variables when calling the function you can switch the order of the arguments. Also, you can add some default values when you define the function.

```{r}
# A simple R code to demonstrate
# passing arguments to a function

Rectangle <-  function(length=5, width=4){
area = length * width
return(area)
}

# Case 1:
Rectangle(2, 3)

# Case 2: If you do not want to follow any order, 
#you can include the name of the arguments
Rectangle(width = 8, length = 4)

# Case 3: default's values
Rectangle()

```

## [Quick exercise (III)]{style="color:darkseagreen"}

Now, we want a function that help us with the a basic chemistry calculation that you surely have used many times:

$$
C_{1} \cdot  V_{1} = C_{2} \cdot  V_{2}
$$

Write a function named *dilution* that returns V1, given C1, C2 and V2. Test it with an example in which you have a concentrated solution of NaCl 250 mM (1) and you need to preparate 10 mL of a buffer containing 10 mM NaCl. How much NaCl from your stock do you need?

```{webr-r}
#Your function here




#Try it
dilution(250,10,10)
```

## Including checkpoints

Now we are going to try a longer code to solve a more complex example.

![](images/covid_pcr.png)

```{r wd, echo = FALSE, results = 'asis'}
cat("**How many arguments should have this function?**",fitb(2))
```

Now let's see a possible way to do it:

```{r, error=TRUE}
#we need to arguments
price_calculator <- function(samples, category){
  categories<-c(1,1.15,2)
  names(categories)=c("normal","priority","urgent")
  if(samples < 10 ){
    price<-19 * samples * categories[which(names(categories)==category)]
  } else if (samples < 50 ){
    price<-14 * samples * categories[which(names(categories)==category)]
  } else if (samples >= 50  ){
    price<-10 * samples * categories[which(names(categories)==category)]
  }
paste("El precio es de",price, "euros.")
}
price_calculator(samples=10,category="normal")
price_calculator(10,"urgent")
price_calculator(10,"urgnt")
```

::: callout-note
## Use of Which and Switch

Note that `which()` gives you a vector with the index or [indices]{.underline} of the vector, not the actual values. That's why we are using `categories[]` to get the desired subset; in this case, the [value]{.underline} of the vector element that fulfills the condition specified by which.

In the following example, we have used a more direct approach. We have simply swapped the strings ("normal", "priority" and "urgent") for the numeric values by using the `switch()` function. You can find more examples of using `switch()` in this [link](https://www.learnbyexample.org/r-switch-function/).
:::

It seems to work, but wrong data inputs are not recognized. How can we introduce checkpoints for the input arguments to prevent unwanted output?

```{r error=TRUE}
#new version with checkpoints
price_calculator2 <- function(samples, category = "normal"|"priority"|"urgent"){
    category <-  switch (category,
      normal = 1,
      priority = 1.15,
      urgent = 2)
    if(samples < 10 ){
      price <- 19 * samples * category
    } else if (samples < 50 ){
      price <- 14 * samples * category
    } else if (samples >= 50  ){
      price <- 10 * samples * category
    } 
    ifelse(length(price) > 0, return(price), stop("Prioridad incorecta. No se ha podido calcular el precio")  )
}
price_calculator2(10,"normal")
price_calculator2(10,"urgent")
price_calculator2(10,"urgnt")
price_calculator2(5.3,"normal")
#WTF?
```

We just noticed that the function calculated the price for 5.3 samples, which is nonsense. We should then introduce a new checkpoint for the format of the introduced value for the variable samples.

```{r, error=TRUE}
#alternative with checkpoint for number of samples
price_calculator3 <- function(samples, category = "normal"|"priority"|"urgent"){
  category <-  switch (category,
                       normal = 1,
                       priority = 1.15,
                       urgent = 2)
  if (abs(floor(samples)) != samples){ # check that number of samples is an integer number
    stop("Número de muestras incorrecto")
  }
  if(samples < 10 ){
    price <- 19 * samples * category
  } else if (samples < 50 ){
    price <- 14 * samples * category
  } else if (samples >= 50  ){
    price <- 10 * samples * category
  } 
  ifelse(length(price) > 0, return(price), stop("Prioridad incorecta. No se ha podido calcular el precio")  )
}

#test again
price_calculator3(50, "urgente")
price_calculator3(50, "urgent")
price_calculator3(-5, "normal")
price_calculator3(5.2, "normal")
```

------------------------------------------------------------------------

## [Quick exercise (IV)]{style="color:darkseagreen"}

When creating functions, you can include any R functionality, including reading and parsing external data files. Let's do a short exercise, within the context of molecular biology.

**Can you write a function that convert R into a molecular biology dogma interpreter?**

You can use the table [*genetic_code.csv*](data/genetic_code.csv), located in the `data` folder that contains the conversion between all the nucleic acid sequence codons and its encoded amino acid in IUPAC one letter code.

Try it out with some examples, including right and wrong codons, like "ATG", "TAA", "CAT", or "AXG".

```{r, echo = TRUE, error = TRUE, eval = TRUE, webex.hide = "Answer"}
#the molecular biology dogma with R

codon2aa <- function(inputCodon) {
  code<-read.csv2("data/genetic_code.csv", stringsAsFactors = FALSE)
  aa <- code$AA[code$Codon==inputCodon]
  return(aa)
}
#now let's try it
codon2aa("ATG")
codon2aa("TAA")
codon2aa("CAT")
codon2aa("AXG")
```

Can you also check the value of the variable `aa` ?

```{r error= TRUE}
#'aa'??
print(aa)
```

What just happened? There are a few things worth to comment here:

1.  If the function cannot find the right value to return, the output is empty: `character(0)`

2.  The variable `aa` seems nonexistent! Variables defined in a function are only **local variables** and cannot be called outside the function.

However, proteins are made up of more than one amino acid, so it'd be great if the input could be a vector of several codons instead a single codon.

Can you add checkpoints and decide how to handle errors?

```{r, error=TRUE,  eval = TRUE, webex.hide = "See an answer"}
#version 2

codon2aa_2 <- function(codons) {
  aa<-c()
  code<-read.csv2("data/genetic_code.csv", stringsAsFactors = FALSE)
  for (i in 1:length(codons)){ #loop over all the elements of the vector 'codons'
    stopifnot("Uno o más de los codones no es correcto. No se ha podido traducir ;)" = codons[i] %in% code$Codon) #check for correct values
    aa[i] <- code$AA[code$Codon==codons[i]]
  }
  return(aa)
}

#let's try it
codon2aa_2(c("ATG","TGA"))
codon2aa_2(c("ARG","TGA"))
codon2aa_2(c("ATG","CAT", "CAT","AAA","TAA"))
```

In this second example, `aa` is not a numeric variable (=vector of 1 element), but a "normal vector", so we need to define it before using in the loop. Also, we have used the function `stopifnot()` to check for the codons. This function is a shortcut for a standard `if{}` or `ifelse{}` to check the codons and a stop if they are not found.

## [Quick exercise (V)]{style="color:darkseagreen"}

**Write a function that calculate your approximate age in months.**

```{r, echo = TRUE, eval = FALSE, webex.hide = "Hint"}
?as.Date
?difftime

#See some examples: https://www.geeksforgeeks.org/calculate-time-difference-between-dates-in-r-programming-difftime-function/
```

```{r, echo = TRUE, error=TRUE, eval = TRUE, webex.hide = "Answer 1"}
#quickest way I found
age <-  function(x){
  if (!is.na(as.Date(as.character(x),format="%Y-%m-%d"))){
    age <- as.numeric(Sys.Date()-as.Date(x, format="%Y-%m-%d")) #result in days
    print(paste("You are about", round(age/30,1), "months old"))
  }else{
  stop("The input date must be quoted and in format YYYY-MM-DD")
  }
} 
#test
age(18)
age("2004-11-17")
```

```{r, echo = TRUE, error=TRUE, eval = TRUE, webex.hide = "Answer 2"}
#alternative using interactive input & difftime()
df <-  function(x){
  if (missing(x)){ #check for input date
    # if missing, we can ask the user for input
    x <-  readline(prompt="Introduce your birthdate in the format YYYY-MM-DD: ")
  }
  if (!is.na(as.Date(as.character(x),format="%Y-%m-%d"))){
    df <- difftime(Sys.Date(),as.Date(x, format="%Y-%m-%d"))
    print(paste0("If you were born on ", x, ", you are about ", round(as.numeric(df)/30,1), " months old."))
  }else{
  stop("The input date must be in format YYYY-MM-DD")
  }
} 
df("2004-11-17")
df(18)
df()

```

------------------------------------------------------------------------

# References

-   *R packages*, <https://r-pkgs.org/index.html>

-   *R programming for data science,* <https://bookdown.org/rdpeng/rprogdatascience/>

-   Creating functions in *Programming in R* Swcarpentry, <http://swcarpentry.github.io/r-novice-inflammation/02-func-R/index.html>

-   Functions in R programming in *GeeksforGeeks*: <https://www.geeksforgeeks.org/functions-in-r-programming/>

-   Learn R by examples: <https://www.learnbyexample.org/> and <https://www.learnbyexample.org/r-functions/>

------------------------------------------------------------------------

# [Review Exercises]{style="color:darkgreen"}

**Write a function that translate *any* nucleotide sequence into a protein sequence.**

Hints:

1.  You need to check for the number of nucleotides (*i*) and also the number of codons (*j* = *i* / 3) in the sequence.

2.  You may use the function `substr()` (check the help) to divide the sequence into codons. To do so, you may use a loop that split the nucleotides in groups of three.

3.  You would add a `warning()` call when 1-2 nucleotides at the end of the sequence are not used.

4.  Use the function `readLines()` to read the file [lacz.fa](data/lacz.fa), which contains the nucleotide sequence of *E. coli* lacZ gene in [fasta](https://es.wikipedia.org/wiki/Formato_FASTA) format, and obtain the translated sequence.

# [Extra (short) exercises]{style="color:darkseagreen"}

Check the following links for more short exercises about functions in R.

-   <https://www.r-bloggers.com/2016/02/functions-exercises/>
-   <http://mathcenter.oxford.emory.edu/site/math117/probSetRFunctions/>

------------------------------------------------------------------------

# Session Info

```{r}
sessionInfo()
```
